name: Nothing Firmware Dumper

on:
  workflow_dispatch:
    inputs:
      urls:
        description: 'URLs (comma or space separated)'
        required: true
      name:
        description: 'Release tag (optional - will use extracted version if not provided)'
        required: false

jobs:
  dump:
    permissions: write-all
    runs-on: self-hosted

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history to avoid shallow clone issues


    - name: Set script permissions
      run: chmod +x scripts/dump.sh

    - name: Download & Process OTA Packages
      id: dump
      run: |
        # Parse URLs and pass them to the script
        urls="${{ inputs.urls }}"
        # Replace commas with spaces and handle both comma and space separation
        urls=$(echo "$urls" | tr ',' ' ')
        echo "Processing URLs: $urls"
        ./scripts/dump.sh $urls

    - name: Create and push tag
      run: |
        if [ -n "${{ steps.dump.outputs.tag }}" ]; then
          TAG="${{ steps.dump.outputs.tag }}"
        else
          TAG="${{ inputs.name }}"
        fi
        
        echo "Creating tag: $TAG"
        
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Delete tag locally if it exists
        git tag -d "$TAG" 2>/dev/null || true
        
        # Delete tag on remote if it exists (this will not fail if tag doesn't exist)
        git push --delete origin "$TAG" 2>/dev/null || true
        
        # Create new tag pointing to HEAD
        git tag "$TAG" HEAD
        
        # Push the new tag
        git push origin "$TAG"


    - name: Upload release assets
      uses: ncipollo/release-action@v1
      with:
        artifacts: out/*
        artifactErrorsFailBuild: true
        body: ${{ steps.dump.outputs.body }}
        tag: ${{ steps.dump.outputs.tag || inputs.name }}
        name: ${{ steps.dump.outputs.release_name || inputs.name }}
        token: ${{ secrets.GITHUB_TOKEN }}
